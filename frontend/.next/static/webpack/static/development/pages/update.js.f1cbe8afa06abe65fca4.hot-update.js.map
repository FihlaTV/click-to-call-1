{"version":3,"file":"static/webpack/static/development/pages/update.js.f1cbe8afa06abe65fca4.hot-update.js","sources":["webpack:///./components/Question.js"],"sourcesContent":["import React, { Component } from 'react';\n\n\nclass Question extends React.Component {\n\n    constructor(props) {\n\n      super(props);\n\n      const targetType = [];\n\n      this.props.questionChoices.map(tt => {\n\n        if(tt.terms[0].type == \"rep\" && props.targetType == \"US House\") {\n          targetType.push(tt);\n        } else if(tt.terms[0].type == \"sen\" && props.targetType == \"US Senate\") {\n          targetType.push(tt);\n        }\n\n      })\n\n\n      this.state = {\n        answers: props.data,\n        initNames: targetType,\n        names: targetType,\n        targetTypes: props.targetType\n      };\n\n\n      console.log(this.state);\n      this.onInput = this.onInput.bind(this);\n      this.buildRadioButtons = this.buildRadioButtons.bind(this);\n    }\n\n    filterList = (event) => {\n      event.preventDefault();\n\n      let items = this.state.initNames;\n\n      items = items.filter((item) => {\n\n        let fname = item.name.official_full;\n        let dis = item.terms[0].state;\n        let party = item.terms[0].party;\n\n        if(fname.toLowerCase().search(event.target.value.toLowerCase()) !== -1) {\n          return item;\n        } else if(dis.toLowerCase().search(event.target.value.toLowerCase()) !== -1) {\n          return item;\n        } else if(party.toLowerCase().search(event.target.value.toLowerCase()) !== -1) {\n          return item;\n        }\n\n      });\n\n      this.setState({names: items});\n\n    }\n\n    handleSelectChange = (event) => {\n      let value = event.target.value;\n      this.setState({executeStatus: value});\n    };\n\n\n    executeTasks = (event) => {\n\n      let questionChoices = this.props.questionChoices;\n      let names = this.state.names;\n      let stateanswers = this.state.answers;\n      let option = this.state.executeStatus;\n\n      let newstateanswers = [];\n      let qcs = [];\n\n      let answers = [];\n\n      // Loops through search results\n      names.map(name => {\n        // Assigns action to candidates\n        name.answer = option;\n        let id = name.id.bioguide;\n        let answer = { id , answer: name.answer };\n        answers.push(answer);\n      });\n\n      if(stateanswers) {\n        // Update existing candidates with new answers\n        stateanswers.map(sans => {\n          let sansID = sans.id;\n          answers.map(ans => {\n            if(sansID === ans.id) {\n              sans.answer = ans.answer\n              // answers.shift();\n            }\n          });\n          newstateanswers.push(sans);\n        });\n        this.setState({answers: newstateanswers}, () => console.log(this.state.answers));\n      } else {\n        this.setState({answers}, () => console.log(this.state.answers));\n      }\n\n    }\n\n\n    onInput(e, props) {\n      e.preventDefault();\n      const id = e.target.name;\n      const answer2 = { id, answer: e.target.value };\n      let answers;\n      if(this.state.answers) {\n        if (this.state.answers.some(answer => answer.id === id)) {\n          answers = [...this.state.answers.filter(answer => answer.id !== id), answer2];\n        } else {\n          answers = [...this.state.answers, answer2];\n        }\n      } else {\n        answers = [answer2];\n      }\n\n      this.setState({ answers }, () => console.log(this.state.answers));\n\n    }\n\n    buildRadioButtons(arr, type, id, checked) {\n\n      return arr.map((choice, i) => {\n\n        if(choice == checked) {\n          return (\n            <React.Fragment key={i}>\n              <input\n                className={checked+\" trueee\"}\n                onChange={this.onInput}\n                onClick={this.onInput}\n                type=\"radio\"\n                id={choice+\"-\"+id}\n                name={id}\n                checked={true}\n                value={choice}\n              />\n              <label htmlFor={choice+\"-\"+id} className={choice+\"Label\"}>{choice}</label>\n            </React.Fragment>\n         )\n        } else {\n          return (\n            <React.Fragment key={i}>\n              <input\n                className={checked+\" falseee\"}\n                onChange={this.onInput}\n                onClick={this.onInput}\n                type=\"radio\"\n                id={choice+\"-\"+id}\n                name={id}\n                checked={false}\n                value={choice}\n              />\n              <label htmlFor={choice+\"-\"+id} className={choice+\"Label\"}>{choice}</label>\n            </React.Fragment>\n          )\n        }\n      }\n    )\n  }\n\n    render() {\n\n        var iterator = this.state.names.map((question, i) => {\n\n\n        const choices = [\"support\", \"oppose\", \"other\", \"none\"];\n        const questionType = \"radio\";\n        let questionText;\n        if(question.terms[0].type === \"sen\") {\n           questionText = question.name.official_full+\" - \"+question.terms[0].party+\" - \"+question.terms[0].state;\n        } else {\n           questionText = question.name.official_full+\" - \"+question.terms[0].party+\" - \"+question.terms[0].state+\"-\"+question.terms[0].district;\n        }\n        const questionID = question.id.bioguide;\n\n        if(this.state.answers && this.state.names) {\n          this.state.answers.map(item => {\n            if(item.id == questionID && choices.includes(item.answer)) {\n              question.answer = item.answer;\n            }\n          });\n        } else {\n          question.answer = '';\n        }\n\n        return (\n          <div className=\"candidatePerson\" key={i}>\n            <p>{questionText}</p>\n            <div className=\"switch-field\">\n              {this.buildRadioButtons(choices, questionType, questionID, question.answer)}\n            </div>\n          </div>\n        );\n      });\n      return (\n        <React.Fragment>\n          <div id=\"candidateSearch\">\n            <label>Filter: </label>\n            <input id=\"candidateSearch\" type=\"text\" placeholder=\"Search\" onChange={this.filterList} />\n            <div className=\"executeTasks\">\n\n              <label>Execute: </label>\n\n              <select\n                onChange={this.handleSelectChange}\n                value={this.state.candidateStance}\n                name=\"candidateStance\"\n                className=\"select-css\"\n              >\n                <option value=\"\">Choose an Option</option>\n                <option value=\"support\">Support</option>\n                <option value=\"oppose\">Oppose</option>\n                <option value=\"other\">Other</option>\n                <option value=\"none\">None</option>\n              </select>\n\n              <a onClick={this.executeTasks}>Execute</a>\n\n            </div>\n\n          </div>\n          <div id=\"targetPeopleContainer\">\n            {iterator}\n          </div>\n        </React.Fragment>\n      );\n    }\n  }\n\n\n  export default Question;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;;;;;AAEA;AAAA;AACA;AADA;AACA;AACA;AACA;AAHA;AA+BA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAtDA;AAwDA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AA3DA;AA+DA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAhGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAQA;AACA;AACA;AA3BA;AA4BA;AACA;;;AAytOA;AACA;AAyOA;;;;A","sourceRoot":""}