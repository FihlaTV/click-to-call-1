{"version":3,"file":"static/webpack/static/development/pages/dashboard.js.9d86f9d89d677c2197dd.hot-update.js","sources":["webpack:///./components/Search.js"],"sourcesContent":["import React from 'react';\nimport Downshift from 'downshift';\nimport Router from 'next/router';\nimport { ApolloConsumer } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport debounce from 'lodash.debounce';\nimport { DropDown, DropDownItem, SearchStyles } from './styles/DropDown';\n\n\nconst SEARCH_ITEMS_QUERY = gql`\n  query SEARCH_ITEMS_QUERY($searchTerm: String!) {\n    campaignItems(where: { title_contains: $searchTerm }) {\n      id\n      title\n    }\n  }\n`;\n\nfunction routeToItem(item) {\n  Router.push({\n    pathname: '/item',\n    query: {\n      id: item.id,\n    },\n  });\n}\n\nclass AutoComplete extends React.Component {\n  state = {\n    items: [],\n    loading: false,\n\n  }\n  onChange = debounce( async (e, client) => {\n    // turn loading on\n    this.setState({loading: true});\n    // manually trigger apollo client\n    const res = await client.query({\n      query: SEARCH_ITEMS_QUERY,\n      variables: { searchTerm: e.target.value },\n    });\n    console.log(res);\n    this.setState({\n      items: res.data.campaignItems,\n      loading: false\n    });\n  }, 350);\n\n  render() {\n    return (\n      <SearchStyles>\n        <Downshift>\n          {({getInputProps, getItemProps, isOpen, inputValue, highlightedIndex}) => (\n        <div>\n          <ApolloConsumer>\n            {(client) => (\n              <input\n                {...getInputProps({\n                  type: \"search\",\n                  placeholder: \"Search\",\n                  id: \"search\",\n                  className: this.state.loading ? 'loading' : '',\n                  onChange: e => {\n                      e.persist();\n                      this.onChange(e, client);\n                    }\n                  }\n                )}\n              />\n            )}\n          </ApolloConsumer>\n          { isOpen && (\n            <DropDown>\n              {this.state.items.map((item, index) => (\n                console.log(item)\n                // <DropDownItem\n                //   {...getItemProps({item})}\n                //   key={item.id}\n                //   highlighted={index === highlightedIndex}\n                // >\n                //   {item.title}\n                // </DropDownItem>\n              ))}\n            </DropDown>\n          )}\n        </div>\n        )}\n        </Downshift>\n      </SearchStyles>\n    );\n  }\n}\n\nexport default AutoComplete;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAQA;AACA;AACA;AACA;AACA;AADA;AAFA;AAMA;AACA;AACA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAFA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAJA;AAAA;AAKA;AACA;AAAA;AAAA;AAFA;AACA;AALA;AAIA;AAIA;AACA;AAAA;AACA;AACA;AAFA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;;;;;;AAcA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AARA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AArBA;AAsCA;;;;AA/DA;AACA;AAiEA;;;;A","sourceRoot":""}